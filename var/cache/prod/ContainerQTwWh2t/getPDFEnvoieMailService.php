<?php

namespace ContainerQTwWh2t;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPDFEnvoieMailService extends App_KernelProdContainer
{
    /*
     * Gets the public 'App\Controller\PDF_Envoie_Mail' shared autowired service.
     *
     * @return \App\Controller\PDF_Envoie_Mail
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['cache.rate_limiter'] ?? $container->load('getCache_RateLimiterService'));
        $b = ($container->privates['lock.default.factory'] ?? $container->load('getLock_Default_FactoryService'));

        $container->services['App\\Controller\\PDF_Envoie_Mail'] = $instance = new \App\Controller\PDF_Envoie_Mail(($container->privates['limiter.pdf_generation_court'] ?? $container->load('getLimiter_PdfGenerationCourtService')), new \Symfony\Component\RateLimiter\RateLimiterFactory(['policy' => 'fixed_window', 'limit' => 1, 'interval' => '1 minute', 'id' => 'pdf_generation_moyen'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b), new \Symfony\Component\RateLimiter\RateLimiterFactory(['policy' => 'fixed_window', 'limit' => 1, 'interval' => '60 minute', 'id' => 'pdf_generation_long'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b));

        $instance->setContainer(($container->privates['.service_locator.QaaoWjx'] ?? $container->load('get_ServiceLocator_QaaoWjxService'))->withContext('App\\Controller\\PDF_Envoie_Mail', $container));

        return $instance;
    }
}
